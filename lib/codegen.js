const s = require('generate-string')

module.exports = function generateCode (hyperswitch) {
  let str = ''
  str += '// This file is autogenerated by the hyperswitch compiler\n'
  str += '/* eslint-disable camelcase */\n'
  str += '\n'
  str += 'const { c, b4a, assert } = require(\'hyperswitch/runtime\')\n'
  str += 'const { version, resolveStruct } = require(\'./messages.js\')\n'
  str += '\n'

  str += 'class Router {\n'
  str += '  constructor () {\n'
  for (const handler of hyperswitch.handlers) {
    str += `    this._handler${handler.id} = null\n`
  }
  str += '\n'
  str += `    this._missing = ${hyperswitch.handlers.length}\n`
  str += '  }\n'
  str += '\n'
  str += '  add (name, handler) {\n'
  str += '    switch (name) {\n'
  for (const handler of hyperswitch.handlers) {
    str += `      case ${s(handler.name)}:\n`
    str += `        this._handler${handler.id} = handler\n`
    str += '        break\n'
  }
  str += '      default:\n'
  str += '        throw new Error(\'Cannot register a handler for a nonexistent route: \' + name)\n'
  str += '    }\n'
  str += '    this._missing--\n'
  str += '  }\n'
  str += '\n'
  str += '  _checkAll () {\n'
  for (const handler of hyperswitch.handlers) {
    str += `    assert(this._handler${handler.id} !== null, 'Missing handler for ${JSON.stringify(handler.name)}')\n`
  }
  str += '  }\n'
  str += '\n'
  str += '  dispatch (encoded) {\n'
  str += '    if (this._missing > 0) {\n'
  str += '      this._checkAll()\n'
  str += '    }\n'
  str += '\n'
  str += '    const state = { buffer: encoded, start: 0, end: encoded.byteLength }\n'
  str += '    const id = c.uint.decode(state)\n'
  str += '\n'
  str += '    switch (id) {\n'
  for (const handler of hyperswitch.handlers) {
    str += `      case ${handler.id}:\n`
    str += `        return this._handler${handler.id}(resolveStruct(${s(handler.requestType)}).decode(state))\n`
  }
  str += '      default:\n'
  str += '        throw new Error(\'Handler not found for ID:\' + message.id)\n'
  str += '    }\n'
  str += '  }\n'
  str += '}\n'

  str += '\n'

  str += 'function dispatch (name, message, opts) {\n'
  str += '  const state = c.state()\n'
  str += '\n'
  str += '  const o = getEncoderAndId(name)\n'
  str += '\n'
  str += '  c.uint.preencode(state, o.id)\n'
  str += '  o.enc.preencode(state, message)\n'
  str += '\n'
  str += '  state.buffer = b4a.allocUnsafe(state.end)\n'
  str += '  c.uint.encode(state, o.id)\n'
  str += '  o.enc.encode(state, message)\n'
  str += '\n'
  str += '  return state.buffer\n'
  str += '}\n'
  str += '\n'

  str += 'function getEncoderAndId (name, opts) {\n'
  str += '  switch (name) {\n'
  for (const handler of hyperswitch.handlers) {
    str += `    case ${s(handler.name)}:\n`
    str += '      return {\n'
    str += `        id: ${handler.id},\n`
    str += `        enc: resolveStruct(${s(handler.requestType)}, opts && opts.version)\n`
    str += '      }\n'
  }
  str += '    default:\n'
  str += '      throw new Error(\'Handler not found for name:\' + name)\n'
  str += '  }\n'
  str += '}\n'

  str += '\n'

  str += 'module.exports = {\n'
  str += '  version,\n'
  str += '  dispatch,\n'
  str += '  Router\n'
  str += '}\n'

  return str
}
